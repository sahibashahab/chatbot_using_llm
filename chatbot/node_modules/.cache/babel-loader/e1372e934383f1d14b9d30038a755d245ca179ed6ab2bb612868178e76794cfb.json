{"ast":null,"code":"var _jsxFileName = \"D:\\\\office\\\\react1\\\\react\\\\chatbot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport chatbotlogo from './assets/chat.jpg';\nimport addBtn from './assets/addBtn.png';\nimport sendBtn from './assets/send.svg';\nimport usericon from './assets/usericon.webp';\nimport c2clogo from './assets/chat.jpg';\nimport { sendMsgToGroq } from './api';\nimport { useRef, useState, useEffect } from 'react';\nimport mammoth from \"mammoth\";\nimport * as pdfjsLib from \"pdfjs-dist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractTextFromFile = async file => {\n  const ext = file.name.split('.').pop().toLowerCase();\n  if (ext === \"txt\") {\n    return await readTextFile(file);\n  } else if (ext === \"docx\") {\n    return await readDocxFile(file);\n  } else if (ext === \"pdf\") {\n    return await readPdfFile(file);\n  } else {\n    alert(\"Unsupported file type.\");\n    return \"\";\n  }\n};\nconst readTextFile = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n};\nconst readDocxFile = async file => {\n  const arrayBuffer = await file.arrayBuffer();\n  const result = await mammoth.extractRawText({\n    arrayBuffer\n  });\n  return result.value;\n};\nconst readPdfFile = async file => {\n  const arrayBuffer = await file.arrayBuffer();\n  const pdf = await pdfjsLib.getDocument({\n    data: arrayBuffer\n  }).promise;\n  let text = '';\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const content = await page.getTextContent();\n    text += content.items.map(item => item.str).join(' ') + '\\n';\n  }\n  return text;\n};\nfunction App() {\n  _s();\n  const msgEnd = useRef(null);\n  const [Input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    text: \"Hi, I am Chatbot, a state-of-the-art language model. I am designed to understand and generate human-like text based on truth.\",\n    isBot: true\n  }]);\n  const [savedChats, setSavedChats] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  useEffect(() => {\n    var _msgEnd$current;\n    (_msgEnd$current = msgEnd.current) === null || _msgEnd$current === void 0 ? void 0 : _msgEnd$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const handleSend = async () => {\n    if (Input.trim() === \"\") return;\n    const text = Input;\n    setInput('');\n    setMessages(prev => [...prev, {\n      text,\n      isBot: false\n    }]);\n    const res = await sendMsgToGroq(text);\n    setMessages(prev => [...prev, {\n      text: res,\n      isBot: true\n    }]);\n  };\n  const handleEnter = async e => {\n    if (e.key === 'Enter') await handleSend();\n  };\n  const handleSaveChat = () => {\n    const currentDateTime = new Date().toLocaleString();\n    let saved = JSON.parse(localStorage.getItem('savedChats'));\n    if (!Array.isArray(saved)) saved = [];\n    const newChat = {\n      date: currentDateTime,\n      messages: messages\n    };\n    saved.push(newChat);\n    localStorage.setItem('savedChats', JSON.stringify(saved));\n    alert('Chat saved successfully!');\n  };\n  const handleViewChat = () => {\n    const saved = JSON.parse(localStorage.getItem('savedChats'));\n    if (saved && Array.isArray(saved)) {\n      setSavedChats(saved);\n      setShowDropdown(!showDropdown);\n    } else {\n      alert('No saved chats found.');\n    }\n    const handleFileUpload = async e => {\n      const file = e.target.files[0];\n      if (!file) return;\n      const fileText = await extractTextFromFile(file);\n      const questions = fileText.split(/\\n|(?<=\\?)\\s+/).filter(line => line.trim().endsWith(\"?\"));\n      if (questions.length === 0) {\n        alert(\"No questions found in file.\");\n        return;\n      }\n      const answers = [];\n      for (const question of questions) {\n        setMessages(prev => [...prev, {\n          text: question,\n          isBot: false\n        }]);\n        const res = await sendMsgToGroq(question);\n        setMessages(prev => [...prev, {\n          text: res,\n          isBot: true\n        }]);\n        answers.push({\n          question,\n          answer: res\n        });\n      }\n      const answerText = answers.map(a => `Q: ${a.question}\\nA: ${a.answer}\\n`).join(\"\\n\");\n\n      // Ask user how to handle the answers\n      const action = window.prompt(\"Type 'save' to download answers, or 'view' to display them:\");\n      if (action === \"save\") {\n        const blob = new Blob([answerText], {\n          type: \"text/plain\"\n        });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = \"answers.txt\";\n        link.click();\n      } else {\n        setMessages(prev => [...prev, {\n          text: answerText,\n          isBot: true\n        }]);\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upperSide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upperSideTop\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: chatbotlogo,\n            alt: \"Logo\",\n            className: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"midBtn\",\n            onClick: () => window.location.reload(),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: addBtn,\n              alt: \"newchat\",\n              className: \"addBtn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), \"New Chat\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"midBtn\",\n            onClick: handleSaveChat,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: addBtn,\n              alt: \"savechat\",\n              className: \"addBtn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), \"Save Chat\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"relative\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"midBtn\",\n              onClick: handleViewChat,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: addBtn,\n                alt: \"viewchat\",\n                className: \"addBtn\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), \"View Saved\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdownMenu\",\n              children: savedChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdownItem\",\n                onClick: () => {\n                  setMessages(chat.messages);\n                  setShowDropdown(false);\n                },\n                children: chat.date\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lowerSide\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chats\",\n        children: [messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat ${message.isBot ? \"left\" : \"right\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: message.isBot ? c2clogo : usericon,\n            alt: message.isBot ? \"Bot\" : \"User\",\n            className: \"chatIcon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"txt\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: msgEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatFooter\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inp\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Send a Message\",\n            value: Input,\n            onKeyDown: handleEnter,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send\",\n            onClick: handleSend,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendBtn,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0O4jr7IqdtkqIeALRTX+ubTe+b4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["chatbotlogo","addBtn","sendBtn","usericon","c2clogo","sendMsgToGroq","useRef","useState","useEffect","mammoth","pdfjsLib","jsxDEV","_jsxDEV","extractTextFromFile","file","ext","name","split","pop","toLowerCase","readTextFile","readDocxFile","readPdfFile","alert","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","arrayBuffer","extractRawText","value","pdf","getDocument","data","promise","text","i","numPages","page","getPage","content","getTextContent","items","map","item","str","join","App","_s","msgEnd","Input","setInput","messages","setMessages","isBot","savedChats","setSavedChats","showDropdown","setShowDropdown","_msgEnd$current","current","scrollIntoView","behavior","handleSend","trim","prev","res","handleEnter","e","key","handleSaveChat","currentDateTime","Date","toLocaleString","saved","JSON","parse","localStorage","getItem","Array","isArray","newChat","date","push","setItem","stringify","handleViewChat","handleFileUpload","target","files","fileText","questions","filter","line","endsWith","length","answers","question","answer","answerText","a","action","window","prompt","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","style","position","chat","index","message","ref","placeholder","onKeyDown","onChange","_c","$RefreshReg$"],"sources":["D:/office/react1/react/chatbot/src/App.js"],"sourcesContent":["import './App.css';\nimport chatbotlogo from './assets/chat.jpg';\nimport addBtn from './assets/addBtn.png';\nimport sendBtn from './assets/send.svg';\nimport usericon from './assets/usericon.webp';\nimport c2clogo from './assets/chat.jpg';\nimport { sendMsgToGroq } from './api';\n\nimport { useRef, useState, useEffect } from 'react';\nimport mammoth from \"mammoth\";\nimport * as pdfjsLib from \"pdfjs-dist\";\n\nconst extractTextFromFile = async (file) => {\n  const ext = file.name.split('.').pop().toLowerCase();\n\n  if (ext === \"txt\") {\n    return await readTextFile(file);\n  } else if (ext === \"docx\") {\n    return await readDocxFile(file);\n  } else if (ext === \"pdf\") {\n    return await readPdfFile(file);\n  } else {\n    alert(\"Unsupported file type.\");\n    return \"\";\n  }\n};\n\nconst readTextFile = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n};\n\nconst readDocxFile = async (file) => {\n  const arrayBuffer = await file.arrayBuffer();\n  const result = await mammoth.extractRawText({ arrayBuffer });\n  return result.value;\n};\n\nconst readPdfFile = async (file) => {\n  const arrayBuffer = await file.arrayBuffer();\n  const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n  let text = '';\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const content = await page.getTextContent();\n    text += content.items.map((item) => item.str).join(' ') + '\\n';\n  }\n  return text;\n};\n\nfunction App() {\n  const msgEnd = useRef(null);\n  const [Input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      text: \"Hi, I am Chatbot, a state-of-the-art language model. I am designed to understand and generate human-like text based on truth.\",\n      isBot: true,\n    }\n  ]);\n  const [savedChats, setSavedChats] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  useEffect(() => {\n    msgEnd.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (Input.trim() === \"\") return;\n    const text = Input;\n    setInput('');\n    setMessages(prev => [...prev, { text, isBot: false }]);\n\n    const res = await sendMsgToGroq(text);\n    setMessages(prev => [...prev, { text: res, isBot: true }]);\n  };\n\n  const handleEnter = async (e) => {\n    if (e.key === 'Enter') await handleSend();\n  };\n\n  const handleSaveChat = () => {\n    const currentDateTime = new Date().toLocaleString();\n    let saved = JSON.parse(localStorage.getItem('savedChats'));\n    if (!Array.isArray(saved)) saved = [];\n\n    const newChat = {\n      date: currentDateTime,\n      messages: messages,\n    };\n\n    saved.push(newChat);\n    localStorage.setItem('savedChats', JSON.stringify(saved));\n\n    alert('Chat saved successfully!');\n  };\n\n  const handleViewChat = () => {\n    const saved = JSON.parse(localStorage.getItem('savedChats'));\n    if (saved && Array.isArray(saved)) {\n      setSavedChats(saved);\n      setShowDropdown(!showDropdown);\n    } else {\n      alert('No saved chats found.');\n    }\n    const handleFileUpload = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n\n  const fileText = await extractTextFromFile(file);\n\n  const questions = fileText.split(/\\n|(?<=\\?)\\s+/).filter(line =>\n    line.trim().endsWith(\"?\")\n  );\n\n  if (questions.length === 0) {\n    alert(\"No questions found in file.\");\n    return;\n  }\n\n  const answers = [];\n\n  for (const question of questions) {\n    setMessages(prev => [...prev, { text: question, isBot: false }]);\n\n    const res = await sendMsgToGroq(question);\n    setMessages(prev => [...prev, { text: res, isBot: true }]);\n\n    answers.push({ question, answer: res });\n  }\n\n  const answerText = answers.map(a => `Q: ${a.question}\\nA: ${a.answer}\\n`).join(\"\\n\");\n\n  // Ask user how to handle the answers\n  const action = window.prompt(\"Type 'save' to download answers, or 'view' to display them:\");\n\n  if (action === \"save\") {\n    const blob = new Blob([answerText], { type: \"text/plain\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"answers.txt\";\n    link.click();\n  } else {\n    setMessages(prev => [...prev, { text: answerText, isBot: true }]);\n  }\n};\n\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"upperSide\">\n          <div className=\"upperSideTop\">\n            <img src={chatbotlogo} alt=\"Logo\" className=\"logo\" />\n            <button className=\"midBtn\" onClick={() => window.location.reload()}>\n              <img src={addBtn} alt=\"newchat\" className=\"addBtn\" />\n              New Chat\n            </button>\n            <button className=\"midBtn\" onClick={handleSaveChat}>\n              <img src={addBtn} alt=\"savechat\" className=\"addBtn\" />\n              Save Chat\n            </button>\n            <div style={{ position: \"relative\" }}>\n              <button className=\"midBtn\" onClick={handleViewChat}>\n                <img src={addBtn} alt=\"viewchat\" className=\"addBtn\" />\n                View Saved\n              </button>\n              {showDropdown && (\n                <div className=\"dropdownMenu\">\n                  {savedChats.map((chat, index) => (\n                    <div\n                      key={index}\n                      className=\"dropdownItem\"\n                      onClick={() => {\n                        setMessages(chat.messages);\n                        setShowDropdown(false);\n                      }}\n                    >\n                      {chat.date}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"lowerSide\"></div>\n      </div>\n\n      <div className=\"main\">\n        <div className=\"chats\">\n          {messages.map((message, i) => (\n            <div key={i} className={`chat ${message.isBot ? \"left\" : \"right\"}`}>\n              <img\n                src={message.isBot ? c2clogo : usericon}\n                alt={message.isBot ? \"Bot\" : \"User\"}\n                className=\"chatIcon\"\n              />\n              <p className=\"txt\">{message.text}</p>\n            </div>\n          ))}\n          <div ref={msgEnd} />\n        </div>\n\n        <div className=\"chatFooter\">\n          <div className=\"inp\">\n            <input\n              type=\"text\"\n              placeholder=\"Send a Message\"\n              value={Input}\n              onKeyDown={handleEnter}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            <button className=\"send\" onClick={handleSend}>\n              <img src={sendBtn} alt=\"Send\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}