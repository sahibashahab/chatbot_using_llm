{"ast":null,"code":"// // // import axios from 'axios';\n\n// // // const BASE_URL = 'http://192.168.100.19:8336'; // ABL Muawin API Base URL\n// // // const chatHistory = []; // to maintain conversation history\n\n// // // /**\n// // //  * Sends a message to the ABL Muawin Chatbot API and returns the bot's response\n// // //  * @param {string} userMessage - The user's input message\n// // //  * @returns {Promise<string>} - The chatbot's reply\n// // //  */\n// // // export const sendMsgToOpenAI = async (userMessage) => {\n// // //   try {\n// // //     // Prepare the request payload\n// // //     const payload = {\n// // //       question: userMessage,\n// // //       chat_history: chatHistory,\n// // //     };\n\n// // //     // API call\n// // //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\n// // //       headers: {\n// // //         'Content-Type': 'application/json',\n// // //       },\n// // //     });\n\n// // //     const botReply = response.data.output;\n\n// // //     // Update chat history for next turns\n// // //     chatHistory.push([\"user\", userMessage]);\n// // //     chatHistory.push([\"ABL muawin\", botReply]);\n\n// // //     return botReply;\n\n// // //   } catch (error) {\n// // //     console.error('Error while communicating with chatbot API:', error);\n// // //     return \"Sorry, I am unable to respond at the moment.\";\n// // //   }\n// // // };\n// // import axios from 'axios';\n\n// // const BASE_URL = 'http://localhost:8000'; // ya jo bhi aapka backend ka address hai\n\n// // export const sendMsgToOpenAI = async (userMessage) => {\n// //   try {\n// //     const payload = {\n// //       question: userMessage,\n// //     };\n\n// //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //       },\n// //     });\n\n// //     return response.data.output;\n\n// //   } catch (error) {\n// //     console.error('Error while communicating with chatbot API:', error);\n// //     return \"Sorry, I am unable to respond at the moment.\";\n// //   }\n// // };\n\n// // import axios from 'axios';\n\n// // const BASE_URL = 'http://localhost:8000'; // ya jo bhi backend ka URL hai\n\n// // export const sendMsgToOpenAI = async (userMessage) => {\n// //   try {\n// //     const payload = { question: userMessage };\n\n// //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //       },\n// //     });\n\n// //     return response.data.output;\n\n// //   } catch (error) {\n// //     console.error('Error while communicating with chatbot API:', error);\n// //     return \"Sorry, I am unable to respond at the moment.\";\n// //   }\n// // };\n// // import axios from 'axios';\n// // const API_URL = \"https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct\";\n\n// // // const API_URL = \"https://api-inference.huggingface.co/models/gpt2\"; // Ya apna model daal sakte ho\n// // const API_TOKEN = \"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\"; // <-- apna token lagana yahan\n\n// // export const sendMsgToHuggingFace = async (message) => {\n// //   try {\n// //     const response = await axios.post(\n// //       API_URL,\n// //       { inputs: message },\n// //       {\n// //         headers: {\n// //           Authorization: `Bearer ${API_TOKEN}`,\n// //         },\n// //       }\n// //     );\n\n// //     const generatedText = response.data[0]?.generated_text || \"Sorry, no response.\";\n// //     return generatedText;\n// //   } catch (error) {\n// //     console.error('Error from HuggingFace API', error);\n// //     return \"Failed to fetch response!\";\n// //   }\n// // };\n// import axios from 'axios';\n\n// const API_URL = \"https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct\";\n// const API_TOKEN = \"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\"; // Use your provided token here\n\n// export const sendMsgToHuggingFace = async (message) => {\n//   try {\n//     console.log('Sending message to HuggingFace API:', message);\n//     const response = await axios.post(\n//       API_URL,\n//       { inputs: message },\n//       {\n//         headers: {\n//           Authorization: `Bearer ${API_TOKEN}`,\n//         },\n//       }\n//     );\n\n//     console.log('API Response:', response);\n\n//     // Check if the response contains the expected text\n//     if (response.data && response.data[0] && response.data[0].generated_text) {\n//       return response.data[0].generated_text;\n//     } else {\n//       return \"No valid response from model.\";\n//     }\n//   } catch (error) {\n//     console.error('API Request Failed:', error.response ? error.response.data : error.message);\n//     return \"Failed to fetch response!\";\n//   }\n// };\n// src/api.js\n// src/api.js\nimport axios from 'axios';\nconst API_URL = \"http://127.0.0.1:8000/chat\"; // Backend FastAPI server ka URL\n\nexport const sendMsgToGroq = async message => {\n  try {\n    const response = await axios.post(API_URL, {\n      message\n    });\n    if (response.data && response.data.reply) {\n      return response.data.reply;\n    } else {\n      return \"No valid response from server.\";\n    }\n  } catch (error) {\n    console.error(\"Error from API:\", error);\n    return \"Error communicating with server.\";\n  }\n};","map":{"version":3,"names":["axios","API_URL","sendMsgToGroq","message","response","post","data","reply","error","console"],"sources":["D:/office/react1/react/chatbot/src/api.js"],"sourcesContent":["// // // import axios from 'axios';\r\n\r\n// // // const BASE_URL = 'http://192.168.100.19:8336'; // ABL Muawin API Base URL\r\n// // // const chatHistory = []; // to maintain conversation history\r\n\r\n// // // /**\r\n// // //  * Sends a message to the ABL Muawin Chatbot API and returns the bot's response\r\n// // //  * @param {string} userMessage - The user's input message\r\n// // //  * @returns {Promise<string>} - The chatbot's reply\r\n// // //  */\r\n// // // export const sendMsgToOpenAI = async (userMessage) => {\r\n// // //   try {\r\n// // //     // Prepare the request payload\r\n// // //     const payload = {\r\n// // //       question: userMessage,\r\n// // //       chat_history: chatHistory,\r\n// // //     };\r\n\r\n// // //     // API call\r\n// // //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\r\n// // //       headers: {\r\n// // //         'Content-Type': 'application/json',\r\n// // //       },\r\n// // //     });\r\n\r\n// // //     const botReply = response.data.output;\r\n\r\n// // //     // Update chat history for next turns\r\n// // //     chatHistory.push([\"user\", userMessage]);\r\n// // //     chatHistory.push([\"ABL muawin\", botReply]);\r\n\r\n// // //     return botReply;\r\n\r\n// // //   } catch (error) {\r\n// // //     console.error('Error while communicating with chatbot API:', error);\r\n// // //     return \"Sorry, I am unable to respond at the moment.\";\r\n// // //   }\r\n// // // };\r\n// // import axios from 'axios';\r\n\r\n// // const BASE_URL = 'http://localhost:8000'; // ya jo bhi aapka backend ka address hai\r\n\r\n// // export const sendMsgToOpenAI = async (userMessage) => {\r\n// //   try {\r\n// //     const payload = {\r\n// //       question: userMessage,\r\n// //     };\r\n\r\n// //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\r\n// //       headers: {\r\n// //         'Content-Type': 'application/json',\r\n// //       },\r\n// //     });\r\n\r\n// //     return response.data.output;\r\n\r\n// //   } catch (error) {\r\n// //     console.error('Error while communicating with chatbot API:', error);\r\n// //     return \"Sorry, I am unable to respond at the moment.\";\r\n// //   }\r\n// // };\r\n\r\n// // import axios from 'axios';\r\n\r\n// // const BASE_URL = 'http://localhost:8000'; // ya jo bhi backend ka URL hai\r\n\r\n// // export const sendMsgToOpenAI = async (userMessage) => {\r\n// //   try {\r\n// //     const payload = { question: userMessage };\r\n\r\n// //     const response = await axios.post(`${BASE_URL}/question/invoke`, payload, {\r\n// //       headers: {\r\n// //         'Content-Type': 'application/json',\r\n// //       },\r\n// //     });\r\n\r\n// //     return response.data.output;\r\n\r\n// //   } catch (error) {\r\n// //     console.error('Error while communicating with chatbot API:', error);\r\n// //     return \"Sorry, I am unable to respond at the moment.\";\r\n// //   }\r\n// // };\r\n// // import axios from 'axios';\r\n// // const API_URL = \"https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct\";\r\n\r\n// // // const API_URL = \"https://api-inference.huggingface.co/models/gpt2\"; // Ya apna model daal sakte ho\r\n// // const API_TOKEN = \"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\"; // <-- apna token lagana yahan\r\n\r\n// // export const sendMsgToHuggingFace = async (message) => {\r\n// //   try {\r\n// //     const response = await axios.post(\r\n// //       API_URL,\r\n// //       { inputs: message },\r\n// //       {\r\n// //         headers: {\r\n// //           Authorization: `Bearer ${API_TOKEN}`,\r\n// //         },\r\n// //       }\r\n// //     );\r\n\r\n// //     const generatedText = response.data[0]?.generated_text || \"Sorry, no response.\";\r\n// //     return generatedText;\r\n// //   } catch (error) {\r\n// //     console.error('Error from HuggingFace API', error);\r\n// //     return \"Failed to fetch response!\";\r\n// //   }\r\n// // };\r\n// import axios from 'axios';\r\n\r\n// const API_URL = \"https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct\";\r\n// const API_TOKEN = \"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\"; // Use your provided token here\r\n\r\n// export const sendMsgToHuggingFace = async (message) => {\r\n//   try {\r\n//     console.log('Sending message to HuggingFace API:', message);\r\n//     const response = await axios.post(\r\n//       API_URL,\r\n//       { inputs: message },\r\n//       {\r\n//         headers: {\r\n//           Authorization: `Bearer ${API_TOKEN}`,\r\n//         },\r\n//       }\r\n//     );\r\n\r\n//     console.log('API Response:', response);\r\n    \r\n//     // Check if the response contains the expected text\r\n//     if (response.data && response.data[0] && response.data[0].generated_text) {\r\n//       return response.data[0].generated_text;\r\n//     } else {\r\n//       return \"No valid response from model.\";\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('API Request Failed:', error.response ? error.response.data : error.message);\r\n//     return \"Failed to fetch response!\";\r\n//   }\r\n// };\r\n// src/api.js\r\n// src/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = \"http://127.0.0.1:8000/chat\"; // Backend FastAPI server ka URL\r\n\r\nexport const sendMsgToGroq = async (message) => {\r\n  try {\r\n    const response = await axios.post(API_URL, { message });\r\n    if (response.data && response.data.reply) {\r\n      return response.data.reply;\r\n    } else {\r\n      return \"No valid response from server.\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error from API:\", error);\r\n    return \"Error communicating with server.\";\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B,CAAC,CAAC;;AAE9C,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAACJ,OAAO,EAAE;MAAEE;IAAQ,CAAC,CAAC;IACvD,IAAIC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACxC,OAAOH,QAAQ,CAACE,IAAI,CAACC,KAAK;IAC5B,CAAC,MAAM;MACL,OAAO,gCAAgC;IACzC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,OAAO,kCAAkC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}