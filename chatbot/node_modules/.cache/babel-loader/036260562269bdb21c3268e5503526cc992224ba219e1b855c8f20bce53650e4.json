{"ast":null,"code":"var _jsxFileName = \"D:\\\\office\\\\react1\\\\react\\\\chatbot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport chatbotlogo from './assets/chat.jpg';\nimport addBtn from './assets/addBtn.png';\nimport sendBtn from './assets/send.svg';\nimport usericon from './assets/usericon.webp';\nimport c2clogo from './assets/chat.jpg';\nimport { sendMsgToGroq } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const msgEnd = useRef(null);\n  const [Input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    text: \"Hi, I am Chatbot, a state-of-the-art language model. I am designed to understand and generate human-like text based on truth.\",\n    isBot: true\n  }]);\n  const [fileToSend, setFileToSend] = useState(null); // store file info here\n\n  useEffect(() => {\n    var _msgEnd$current;\n    (_msgEnd$current = msgEnd.current) === null || _msgEnd$current === void 0 ? void 0 : _msgEnd$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Function to read file content as text (for .txt only here, extend for pdf/docx in backend)\n  const readFileContent = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => resolve(e.target.result);\n      reader.onerror = e => reject(e);\n      reader.readAsText(file);\n    });\n  };\n  const handleFileChange = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setFileToSend(file);\n\n    // Show user message with file name and optional text \"Sending file: ...\"\n    setMessages(prev => [...prev, {\n      text: `Sent a file: ${file.name}`,\n      isBot: false\n    }]);\n\n    // Read file content and send to backend\n    try {\n      const content = await readFileContent(file);\n\n      // Send the file content to backend to extract questions & answer\n      const botResponse = await sendMsgToGroq(content);\n      setMessages(prev => [...prev, {\n        text: botResponse,\n        isBot: true\n      }]);\n    } catch (err) {\n      setMessages(prev => [...prev, {\n        text: \"Failed to read the file.\",\n        isBot: true\n      }]);\n    }\n  };\n  const handleSend = async () => {\n    if (Input.trim() === \"\") return;\n    const text = Input;\n    setInput('');\n    setMessages(prev => [...prev, {\n      text,\n      isBot: false\n    }]);\n    const res = await sendMsgToGroq(text);\n    setMessages(prev => [...prev, {\n      text: res,\n      isBot: true\n    }]);\n  };\n  const handleEnter = async e => {\n    if (e.key === 'Enter') await handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chats\",\n        children: [messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat ${message.isBot ? \"left\" : \"right\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: message.isBot ? c2clogo : usericon,\n            alt: message.isBot ? \"Bot\" : \"User\",\n            className: \"chatIcon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"txt\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: msgEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatFooter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"uploadBtn\",\n          title: \"Upload file\",\n          children: \"\\uD83D\\uDCCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"file-upload\",\n          type: \"file\",\n          accept: \".txt,.pdf,.docx\",\n          style: {\n            display: \"none\"\n          },\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inp\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Send a Message\",\n            value: Input,\n            onKeyDown: handleEnter,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send\",\n            onClick: handleSend,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendBtn,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rJ6QxPu6FEPjVqKAZJ1I1USv/Uw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","useEffect","chatbotlogo","addBtn","sendBtn","usericon","c2clogo","sendMsgToGroq","jsxDEV","_jsxDEV","App","_s","msgEnd","Input","setInput","messages","setMessages","text","isBot","fileToSend","setFileToSend","_msgEnd$current","current","scrollIntoView","behavior","readFileContent","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","readAsText","handleFileChange","files","prev","name","content","botResponse","err","handleSend","trim","res","handleEnter","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","i","src","alt","ref","htmlFor","title","id","type","accept","style","display","onChange","placeholder","value","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["D:/office/react1/react/chatbot/src/App.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport chatbotlogo from './assets/chat.jpg';\nimport addBtn from './assets/addBtn.png';\nimport sendBtn from './assets/send.svg';\nimport usericon from './assets/usericon.webp';\nimport c2clogo from './assets/chat.jpg';\nimport { sendMsgToGroq } from './api';\n\nfunction App() {\n  const msgEnd = useRef(null);\n  const [Input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      text: \"Hi, I am Chatbot, a state-of-the-art language model. I am designed to understand and generate human-like text based on truth.\",\n      isBot: true,\n    }\n  ]);\n  const [fileToSend, setFileToSend] = useState(null); // store file info here\n\n  useEffect(() => {\n    msgEnd.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Function to read file content as text (for .txt only here, extend for pdf/docx in backend)\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = (e) => reject(e);\n      reader.readAsText(file);\n    });\n  };\n\n  const handleFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    setFileToSend(file);\n\n    // Show user message with file name and optional text \"Sending file: ...\"\n    setMessages(prev => [\n      ...prev,\n      { text: `Sent a file: ${file.name}`, isBot: false }\n    ]);\n\n    // Read file content and send to backend\n    try {\n      const content = await readFileContent(file);\n\n      // Send the file content to backend to extract questions & answer\n      const botResponse = await sendMsgToGroq(content);\n\n      setMessages(prev => [...prev, { text: botResponse, isBot: true }]);\n    } catch (err) {\n      setMessages(prev => [...prev, { text: \"Failed to read the file.\", isBot: true }]);\n    }\n  };\n\n  const handleSend = async () => {\n    if (Input.trim() === \"\") return;\n\n    const text = Input;\n    setInput('');\n    setMessages(prev => [...prev, { text, isBot: false }]);\n\n    const res = await sendMsgToGroq(text);\n    setMessages(prev => [...prev, { text: res, isBot: true }]);\n  };\n\n  const handleEnter = async (e) => {\n    if (e.key === 'Enter') await handleSend();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        {/* Your sidebar code here */}\n      </div>\n\n      <div className=\"main\">\n        <div className=\"chats\">\n          {messages.map((message, i) => (\n            <div key={i} className={`chat ${message.isBot ? \"left\" : \"right\"}`}>\n              <img\n                src={message.isBot ? c2clogo : usericon}\n                alt={message.isBot ? \"Bot\" : \"User\"}\n                className=\"chatIcon\"\n              />\n              <p className=\"txt\">{message.text}</p>\n            </div>\n          ))}\n          <div ref={msgEnd} />\n        </div>\n\n        <div className=\"chatFooter\">\n          <label htmlFor=\"file-upload\" className=\"uploadBtn\" title=\"Upload file\">\n            📎\n          </label>\n          <input\n            id=\"file-upload\"\n            type=\"file\"\n            accept=\".txt,.pdf,.docx\"\n            style={{ display: \"none\" }}\n            onChange={handleFileChange}\n          />\n\n          <div className=\"inp\">\n            <input\n              type=\"text\"\n              placeholder=\"Send a Message\"\n              value={Input}\n              onKeyDown={handleEnter}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            <button className=\"send\" onClick={handleSend}>\n              <img src={sendBtn} alt=\"Send\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}