{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\nimport { APIUserAbortError, OpenAIError } from \"../../error.mjs\";\nimport { EventStream } from \"../EventStream.mjs\";\nimport { maybeParseResponse } from \"../ResponsesParser.mjs\";\nexport class ResponseStream extends EventStream {\n  constructor(params) {\n    super();\n    _ResponseStream_instances.add(this);\n    _ResponseStream_params.set(this, void 0);\n    _ResponseStream_currentResponseSnapshot.set(this, void 0);\n    _ResponseStream_finalResponse.set(this, void 0);\n    __classPrivateFieldSet(this, _ResponseStream_params, params, \"f\");\n  }\n  static createResponse(client, params, options) {\n    const runner = new ResponseStream(params);\n    runner._run(() => runner._createResponse(client, params, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createResponse(client, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n    const stream = await client.responses.create({\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n  }\n  [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n    if (this.ended) return;\n    __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n  }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event) {\n    if (this.ended) return;\n    const response = __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n    this._emit('event', event);\n    switch (event.type) {\n      case 'response.output_text.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new OpenAIError(`missing content at index ${event.content_index}`);\n            }\n            if (content.type !== 'output_text') {\n              throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n            }\n            this._emit('response.output_text.delta', {\n              ...event,\n              snapshot: content.text\n            });\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'function_call') {\n            this._emit('response.function_call_arguments.delta', {\n              ...event,\n              snapshot: output.arguments\n            });\n          }\n          break;\n        }\n      default:\n        // @ts-ignore\n        this._emit(event.type, event);\n        break;\n    }\n  }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any events`);\n    }\n    __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet(this, _ResponseStream_params, \"f\"));\n    __classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n    return parsedResponse;\n  }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n    let snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      if (event.type !== 'response.created') {\n        throw new OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);\n      }\n      snapshot = __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n      return snapshot;\n    }\n    switch (event.type) {\n      case 'response.output_item.added':\n        {\n          snapshot.output.push(event.item);\n          break;\n        }\n      case 'response.content_part.added':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            output.content.push(event.part);\n          }\n          break;\n        }\n      case 'response.output_text.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new OpenAIError(`missing content at index ${event.content_index}`);\n            }\n            if (content.type !== 'output_text') {\n              throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n            }\n            content.text += event.delta;\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'function_call') {\n            output.arguments += event.delta;\n          }\n          break;\n        }\n      case 'response.completed':\n        {\n          __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n          break;\n        }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(event => event ? {\n            value: event,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const event = pushQueue.shift();\n        return {\n          value: event,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * @returns a promise that resolves with the final Response, or rejects\n   * if an error occurred or the stream ended prematurely without producing a REsponse.\n   */\n  async finalResponse() {\n    await this.done();\n    const response = __classPrivateFieldGet(this, _ResponseStream_finalResponse, \"f\");\n    if (!response) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return response;\n  }\n}\nfunction finalizeResponse(snapshot, params) {\n  return maybeParseResponse(snapshot, params);\n}","map":{"version":3,"names":["APIUserAbortError","OpenAIError","EventStream","maybeParseResponse","ResponseStream","constructor","params","_ResponseStream_params","set","_ResponseStream_currentResponseSnapshot","_ResponseStream_finalResponse","__classPrivateFieldSet","createResponse","client","options","runner","_run","_createResponse","headers","signal","aborted","controller","abort","addEventListener","__classPrivateFieldGet","_ResponseStream_instances","_ResponseStream_beginRequest","call","stream","responses","create","_connected","event","_ResponseStream_addEvent","_ResponseStream_endRequest","WeakMap","WeakSet","ended","undefined","response","_ResponseStream_accumulateResponse","_emit","type","output","output_index","content","content_index","snapshot","text","arguments","parsedResponse","finalizeResponse","push","item","part","delta","Symbol","asyncIterator","pushQueue","readQueue","done","on","reader","shift","resolve","length","err","reject","next","value","Promise","then","return","finalResponse"],"sources":["D:\\office\\react\\react\\chatbot\\node_modules\\openai\\src\\lib\\responses\\ResponseStream.ts"],"sourcesContent":["import {\n  type ParsedResponse,\n  type Response,\n  type ResponseCreateParamsBase,\n  type ResponseCreateParamsStreaming,\n  type ResponseStreamEvent,\n} from '../../resources/responses/responses';\nimport * as Core from '../../core';\nimport { APIUserAbortError, OpenAIError } from '../../error';\nimport OpenAI from '../../index';\nimport { type BaseEvents, EventStream } from '../EventStream';\nimport { type ResponseFunctionCallArgumentsDeltaEvent, type ResponseTextDeltaEvent } from './EventTypes';\nimport { maybeParseResponse } from '../ResponsesParser';\n\nexport type ResponseStreamParams = Omit<ResponseCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\ntype ResponseEvents = BaseEvents &\n  Omit<\n    {\n      [K in ResponseStreamEvent['type']]: (event: Extract<ResponseStreamEvent, { type: K }>) => void;\n    },\n    'response.output_text.delta' | 'response.function_call_arguments.delta'\n  > & {\n    event: (event: ResponseStreamEvent) => void;\n    'response.output_text.delta': (event: ResponseTextDeltaEvent) => void;\n    'response.function_call_arguments.delta': (event: ResponseFunctionCallArgumentsDeltaEvent) => void;\n  };\n\nexport type ResponseStreamingParams = Omit<ResponseCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class ResponseStream<ParsedT = null>\n  extends EventStream<ResponseEvents>\n  implements AsyncIterable<ResponseStreamEvent>\n{\n  #params: ResponseStreamingParams | null;\n  #currentResponseSnapshot: Response | undefined;\n  #finalResponse: ParsedResponse<ParsedT> | undefined;\n\n  constructor(params: ResponseStreamingParams | null) {\n    super();\n    this.#params = params;\n  }\n\n  static createResponse<ParsedT>(\n    client: OpenAI,\n    params: ResponseStreamParams,\n    options?: Core.RequestOptions,\n  ): ResponseStream<ParsedT> {\n    const runner = new ResponseStream<ParsedT>(params as ResponseCreateParamsStreaming);\n    runner._run(() =>\n      runner._createResponse(client, params, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentResponseSnapshot = undefined;\n  }\n\n  #addEvent(this: ResponseStream<ParsedT>, event: ResponseStreamEvent) {\n    if (this.ended) return;\n\n    const response = this.#accumulateResponse(event);\n    this._emit('event', event);\n\n    switch (event.type) {\n      case 'response.output_text.delta': {\n        const output = response.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          const content = output.content[event.content_index];\n          if (!content) {\n            throw new OpenAIError(`missing content at index ${event.content_index}`);\n          }\n          if (content.type !== 'output_text') {\n            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n          }\n\n          this._emit('response.output_text.delta', {\n            ...event,\n            snapshot: content.text,\n          });\n        }\n        break;\n      }\n      case 'response.function_call_arguments.delta': {\n        const output = response.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'function_call') {\n          this._emit('response.function_call_arguments.delta', {\n            ...event,\n            snapshot: output.arguments,\n          });\n        }\n        break;\n      }\n      default:\n        // @ts-ignore\n        this._emit(event.type, event);\n        break;\n    }\n  }\n\n  #endRequest(): ParsedResponse<ParsedT> {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentResponseSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any events`);\n    }\n    this.#currentResponseSnapshot = undefined;\n    const parsedResponse = finalizeResponse<ParsedT>(snapshot, this.#params);\n    this.#finalResponse = parsedResponse;\n\n    return parsedResponse;\n  }\n\n  protected async _createResponse(\n    client: OpenAI,\n    params: ResponseStreamingParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedResponse<ParsedT>> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n\n    const stream = await client.responses.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this.#endRequest();\n  }\n\n  #accumulateResponse(event: ResponseStreamEvent): Response {\n    let snapshot = this.#currentResponseSnapshot;\n    if (!snapshot) {\n      if (event.type !== 'response.created') {\n        throw new OpenAIError(\n          `When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`,\n        );\n      }\n      snapshot = this.#currentResponseSnapshot = event.response;\n      return snapshot;\n    }\n\n    switch (event.type) {\n      case 'response.output_item.added': {\n        snapshot.output.push(event.item);\n        break;\n      }\n      case 'response.content_part.added': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          output.content.push(event.part);\n        }\n        break;\n      }\n      case 'response.output_text.delta': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'message') {\n          const content = output.content[event.content_index];\n          if (!content) {\n            throw new OpenAIError(`missing content at index ${event.content_index}`);\n          }\n          if (content.type !== 'output_text') {\n            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n          }\n          content.text += event.delta;\n        }\n        break;\n      }\n      case 'response.function_call_arguments.delta': {\n        const output = snapshot.output[event.output_index];\n        if (!output) {\n          throw new OpenAIError(`missing output at index ${event.output_index}`);\n        }\n        if (output.type === 'function_call') {\n          output.arguments += event.delta;\n        }\n        break;\n      }\n      case 'response.completed': {\n        this.#currentResponseSnapshot = event.response;\n        break;\n      }\n    }\n\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](this: ResponseStream<ParsedT>): AsyncIterator<ResponseStreamEvent> {\n    const pushQueue: ResponseStreamEvent[] = [];\n    const readQueue: {\n      resolve: (event: ResponseStreamEvent | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    this.on('event', (event) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ResponseStreamEvent>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ResponseStreamEvent | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((event) => (event ? { value: event, done: false } : { value: undefined, done: true }));\n        }\n        const event = pushQueue.shift()!;\n        return { value: event, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  /**\n   * @returns a promise that resolves with the final Response, or rejects\n   * if an error occurred or the stream ended prematurely without producing a REsponse.\n   */\n  async finalResponse(): Promise<ParsedResponse<ParsedT>> {\n    await this.done();\n    const response = this.#finalResponse;\n    if (!response) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return response;\n  }\n}\n\nfunction finalizeResponse<ParsedT>(\n  snapshot: Response,\n  params: ResponseStreamingParams | null,\n): ParsedResponse<ParsedT> {\n  return maybeParseResponse(snapshot, params);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}